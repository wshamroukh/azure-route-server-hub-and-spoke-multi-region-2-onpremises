# Two RouteServers in two hub VNets with NVA and two Spoke VNets connected to each hub and two onprem sites with s2s vpn tunnels to each hub
# variables
script_start_time=`date +%s`
rg=azrouteserver
location1='centralindia'
location2='centralindia'

hub1_vnet_name='hub1'
hub1_vnet_address='10.1.0.0/16'
hub1_gw_name=hub1-gw
hub1_gw_asn=65515
hub1_gw_subnet_address='10.1.0.0/24'
hub1_rs_name=hub1-ars
hub1_rs_subnet_address='10.1.2.0/24'
hub1_nva_subnet_address='10.1.3.0/24'
hub1_vms_subnet_address='10.1.1.0/24'
hub1_vms_subnet_name='vms'
hub1_nva_subnet_name='nva'
hub1_nva_name='hub1-nva'
hub1_nva_asn=65001
hub1_vm_name='hub1-vm'

hub2_vnet_name='hub2'
hub2_vnet_address='10.2.0.0/16'
hub2_gw_name=hub2-gw
hub2_gw_asn=65515
hub2_gw_subnet_address='10.2.0.0/24'
hub2_rs_name=hub2-ars
hub2_rs_subnet_address='10.2.2.0/24'
hub2_nva_subnet_address='10.2.3.0/24'
hub2_vms_subnet_address='10.2.1.0/24'
hub2_vms_subnet_name='vms'
hub2_nva_subnet_name='nva'
hub2_nva_name='hub2-nva'
hub2_nva_asn=65002
hub2_vm_name='hub2-vm'

spoke11_vnet_name='spoke11'
spoke11_vnet_address='10.11.1.0/24'
spoke11_subnet_name='vms'
spoke11_subnet_address='10.11.1.0/24'
spoke11_vm_name='spoke11-vm'

spoke12_vnet_name='spoke12'
spoke12_vnet_address='10.12.1.0/24'
spoke12_subnet_name='vms'
spoke12_subnet_address='10.12.1.0/24'
spoke12_vm_name='spoke12-vm'

spoke21_vnet_name='spoke21'
spoke21_vnet_address='10.21.1.0/24'
spoke21_subnet_name='vms'
spoke21_subnet_address='10.21.1.0/24'
spoke21_vm_name='spoke21-vm'

spoke22_vnet_name='spoke22'
spoke22_vnet_address='10.22.1.0/24'
spoke22_subnet_name='vms'
spoke22_subnet_address='10.22.1.0/24'
spoke22_vm_name='spoke22-vm'


onprem1_vnet_name='onprem1'
onprem1_vnet_address='172.16.0.0/16'
onprem1_vm_subnet_name='vms'
onprem1_vm_subnet_address='172.16.1.0/24'
onprem1_gw_subnet_name='gw'
onprem1_gw_subnet_address='172.16.0.0/24'
onprem1_gw_vm_name='onprem1-gw'
onprem1_gw_asn=65016
onprem1_vm_name='onprem1-vm'

onprem2_vnet_name='onprem2'
onprem2_vnet_address='172.17.0.0/16'
onprem2_vm_subnet_name='vms'
onprem2_vm_subnet_address='172.17.1.0/24'
onprem2_gw_subnet_name='gw'
onprem2_gw_subnet_address='172.17.0.0/24'
onprem2_gw_vm_name='onprem2-gw'
onprem2_gw_asn=65017
onprem2_vm_name='onprem2-vm'

admin_username=$(whoami)
psk='secret123'

vm_size=Standard_B2ats_v2
vm_image=$(az vm image list -l $location1 -p Canonical -s 22_04-lts --all --query "[?offer=='0001-com-ubuntu-server-jammy'].urn" -o tsv | sort -u | tail -n 1) && echo $vm_image

default_address1='0.0.0.0/1'
default_address2='128.0.0.0/1'
network_address_summary='10.0.0.0/8'

cloudinit_file=~/cloudinit.txt
cat <<EOF > $cloudinit_file
#cloud-config
runcmd:
  - curl -s https://deb.frrouting.org/frr/keys.gpg | sudo tee /usr/share/keyrings/frrouting.gpg > /dev/null
  - echo deb [signed-by=/usr/share/keyrings/frrouting.gpg] https://deb.frrouting.org/frr \$(lsb_release -s -c) frr-stable | sudo tee -a /etc/apt/sources.list.d/frr.list
  - sudo apt update && sudo apt install -y frr frr-pythontools
  - sudo apt install -y strongswan tcptraceroute
  - sudo sed -i "/bgpd=no/ s//bgpd=yes/" /etc/frr/daemons
  - sudo service frr restart
  - touch /etc/strongswan.d/ipsec-vti.sh
  - chmod +x /etc/strongswan.d/ipsec-vti.sh
  - cp /etc/ipsec.conf /etc/ipsec.conf.bak
  - cp /etc/ipsec.secrets /etc/ipsec.secrets.bak
  - echo "net.ipv4.conf.all.forwarding=1" | sudo tee -a /etc/sysctl.conf
  - echo "net.ipv4.conf.default.forwarding=1" | sudo tee -a /etc/sysctl.conf
  - sudo sysctl -p
EOF

function wait_until_finished {
     wait_interval=15
     resource_id=$1
     resource_name=$(echo $resource_id | cut -d/ -f 9)
     echo -e "\e[1;36mWaiting for resource $resource_name to finish provisioning...\e[0m"
     start_time=`date +%s`
     state=$(az resource show --id $resource_id --query properties.provisioningState -o tsv)
     until [[ "$state" == "Succeeded" ]] || [[ "$state" == "Failed" ]] || [[ -z "$state" ]]
     do
        sleep $wait_interval
        state=$(az resource show --id $resource_id --query properties.provisioningState -o tsv)
     done
     if [[ -z "$state" ]]
     then
        echo -e "\e[1;31mSomething really bad happened...\e[0m"
     else
        run_time=$(expr `date +%s` - $start_time)
        ((minutes=${run_time}/60))
        ((seconds=${run_time}%60))
        echo -e "\e[1;32mResource $resource_name provisioning state is $state, wait time $minutes minutes and $seconds seconds\e[0m"
     fi
}

function first_ip(){
    subnet=$1
    IP=$(echo $subnet | cut -d/ -f 1)
    IP_HEX=$(printf '%.2X%.2X%.2X%.2X\n' `echo $IP | sed -e 's/\./ /g'`)
    NEXT_IP_HEX=$(printf %.8X `echo $(( 0x$IP_HEX + 1 ))`)
    NEXT_IP=$(printf '%d.%d.%d.%d\n' `echo $NEXT_IP_HEX | sed -r 's/(..)/0x\1 /g'`)
    echo "$NEXT_IP"
}

# Resource Groups
echo -e "\e[1;36mCreating $rg Resource Group...\e[0m"
az group create -l $location1 -n $rg -o none

# hub1 vnet
echo -e "\e[1;36mCreating $hub1_vnet_name VNet...\e[0m"
az network vnet create -g $rg -n $hub1_vnet_name -l $location1 --address-prefixes $hub1_vnet_address --subnet-name $hub1_vms_subnet_name --subnet-prefixes $hub1_vms_subnet_address -o none
az network vnet subnet create -g $rg -n $hub1_nva_subnet_name --address-prefixes $hub1_nva_subnet_address --vnet-name $hub1_vnet_name -o none
az network vnet subnet create -g $rg -n RouteServerSubnet --address-prefixes $hub1_rs_subnet_address --vnet-name $hub1_vnet_name -o none
az network vnet subnet create -g $rg -n GatewaySubnet --address-prefixes $hub1_gw_subnet_address --vnet-name $hub1_vnet_name -o none

# hub2 vnet
echo -e "\e[1;36mCreating $hub2_vnet_name VNet...\e[0m"
az network vnet create -g $rg -n $hub2_vnet_name -l $location2 --address-prefixes $hub2_vnet_address --subnet-name $hub2_vms_subnet_name --subnet-prefixes $hub2_vms_subnet_address -o none
az network vnet subnet create -g $rg -n $hub2_nva_subnet_name --address-prefixes $hub2_nva_subnet_address --vnet-name $hub2_vnet_name -o none
az network vnet subnet create -g $rg -n RouteServerSubnet --address-prefixes $hub2_rs_subnet_address --vnet-name $hub2_vnet_name -o none
az network vnet subnet create -g $rg -n GatewaySubnet --address-prefixes $hub2_gw_subnet_address --vnet-name $hub2_vnet_name -o none

# hub1-hub2 vnet peering
echo -e "\e[1;36mEstablishing VNet Peering between $hub1_vnet_name and $hub2_vnet_name VNets...\e[0m"
az network vnet peering create -n $hub1_vnet_name-to-$hub2_vnet_name -g $rg --vnet-name $hub1_vnet_name --remote-vnet $hub2_vnet_name --allow-vnet-access --allow-forwarded-traffic -o none
az network vnet peering create -n $hub2_vnet_name-to-$hub1_vnet_name -g $rg --vnet-name $hub2_vnet_name --remote-vnet $hub1_vnet_name --allow-vnet-access --allow-forwarded-traffic -o none

# hub1 nva
echo -e "\e[1;36mDeploying $hub1_nva_name VM...\e[0m"
az network public-ip create -n "$hub1_nva_name-pubip" -g $rg -l $location1 --allocation-method Static --sku Basic -o none
az network nic create -n "$hub1_nva_name-ext-nic" -l $location1 --vnet-name $hub1_vnet_name -g $rg --subnet $hub1_nva_subnet_name --ip-forwarding true --public-ip-address "$hub1_nva_name-pubip" -o none
az network nic create -n "$hub1_nva_name-int-nic" -l $location1 --vnet-name $hub1_vnet_name -g $rg --subnet $hub1_vms_subnet_name --ip-forwarding true -o none
az vm create -n $hub1_nva_name -g $rg -l $location1 --image $vm_image --nics "$hub1_nva_name-ext-nic" "$hub1_nva_name-int-nic" --os-disk-name "$hub1_nva_name-disk" --size $vm_size --admin-username $admin_username --generate-ssh-keys --custom-data $cloudinit_file --no-wait

# hub1 nva details
echo -e "\e[1;36mGetting $hub1_nva_name details...\e[0m"
hub1_nva_pubip=$(az network public-ip show -g $rg -n "$hub1_nva_name-pubip" --query ipAddress -o tsv) && echo $hub1_nva_name: $hub1_nva_pubip
hub1_nva_private_ext_ip=$(az network nic show -g $rg -n $hub1_nva_name-ext-nic --query ipConfigurations[].privateIPAddress -o tsv) && echo $hub1_nva_name external NIC IP: $hub1_nva_private_ext_ip
hub1_nva_private_int_ip=$(az network nic show -g $rg -n $hub1_nva_name-int-nic --query ipConfigurations[].privateIPAddress -o tsv) && echo $hub1_nva_name internal NIC IP: $hub1_nva_private_int_ip
nva1_ext_gw_ip=$(first_ip $hub1_nva_subnet_address) && echo $hub1_nva_name external NIC gw IP: $nva1_ext_gw_ip
nva1_int_gw_ip=$(first_ip $hub1_vms_subnet_address) && echo $hub1_nva_name internal NIC gw ip: $nva1_int_gw_ip

# hub2 nva
echo -e "\e[1;36mDeploying $hub2_nva_name VM...\e[0m"
az network public-ip create -n "$hub2_nva_name-pubip" -g $rg -l $location2 --allocation-method Static --sku Basic -o none
az network nic create -n "$hub2_nva_name-ext-nic" -l $location2 --vnet-name $hub2_vnet_name -g $rg --subnet $hub2_nva_subnet_name --ip-forwarding true --public-ip-address "$hub2_nva_name-pubip" -o none
az network nic create -n "$hub2_nva_name-int-nic" -l $location2 --vnet-name $hub2_vnet_name -g $rg --subnet $hub2_vms_subnet_name --ip-forwarding true -o none
az vm create -n $hub2_nva_name -g $rg -l $location2 --image $vm_image --nics "$hub2_nva_name-ext-nic" "$hub2_nva_name-int-nic" --os-disk-name "$hub2_nva_name-disk" --size $vm_size --admin-username $admin_username --generate-ssh-keys --custom-data $cloudinit_file --no-wait

# hub2 nva details
echo -e "\e[1;36mGetting $hub2_nva_name details...\e[0m"
hub2_nva_pubip=$(az network public-ip show -g $rg -n "$hub2_nva_name-pubip" --query ipAddress -o tsv) && echo $hub2_nva_name: $hub2_nva_pubip
hub2_nva_private_ext_ip=$(az network nic show -g $rg -n $hub2_nva_name-ext-nic --query ipConfigurations[].privateIPAddress -o tsv) && echo $hub2_nva_name external NIC IP: $hub2_nva_private_ext_ip
hub2_nva_private_int_ip=$(az network nic show -g $rg -n $hub2_nva_name-int-nic --query ipConfigurations[].privateIPAddress -o tsv) && echo $hub2_nva_name internal NIC IP: $hub2_nva_private_int_ip
nva2_ext_gw_ip=$(first_ip $hub2_nva_subnet_address) && echo $hub2_nva_name external NIC gw IP: $nva2_ext_gw_ip
nva2_int_gw_ip=$(first_ip $hub2_vms_subnet_address) && echo $hub2_nva_name internal NIC gw IP: $nva2_int_gw_ip

# Protect NVA1 Subnet from Route Changes:
echo -e "\e[1;36mDeploying $hub1_nva_name-rt Route table to protect $hub1_nva_name VM from route changes...\e[0m"
az network route-table create -n $hub1_nva_name-rt -g $rg -l $location1 --disable-bgp-route-propagation true -o none
az network route-table route create -g $rg --route-table-name $hub1_nva_name-rt --name to-$spoke21_vnet_name --address-prefix $spoke21_vnet_address --next-hop-type VirtualAppliance --next-hop-ip-address $hub2_nva_private_ext_ip -o none
az network route-table route create -g $rg --route-table-name $hub1_nva_name-rt --name to-$spoke22_vnet_name --address-prefix $spoke22_vnet_address --next-hop-type VirtualAppliance --next-hop-ip-address $hub2_nva_private_ext_ip -o none
az network route-table route create -g $rg --route-table-name $hub1_nva_name-rt --name to-$onprem2_vnet_name --address-prefix $onprem2_vnet_address --next-hop-type VirtualAppliance --next-hop-ip-address $hub2_nva_private_ext_ip -o none
az network route-table route create -g $rg --route-table-name $hub1_nva_name-rt --name to-$onprem1_vnet_name --address-prefix $onprem1_vnet_address --next-hop-type VirtualNetworkGateway -o none
az network vnet subnet update -g $rg --vnet-name $hub1_vnet_name -n $hub1_nva_subnet_name --route-table $hub1_nva_name-rt -o none

# Protect NVA2 Subnet from Route Changes:
echo -e "\e[1;36mDeploying $hub2_nva_name-rt Route table to protect $hub2_nva_name VM from route changes...\e[0m"
az network route-table create -n $hub2_nva_name-rt -g $rg -l $location2 --disable-bgp-route-propagation true -o none
az network route-table route create -g $rg --route-table-name $hub2_nva_name-rt --name to-$spoke11_vnet_name --address-prefix $spoke11_vnet_address --next-hop-type VirtualAppliance --next-hop-ip-address $hub1_nva_private_ext_ip -o none
az network route-table route create -g $rg --route-table-name $hub2_nva_name-rt --name to-$spoke12_vnet_name --address-prefix $spoke12_vnet_address --next-hop-type VirtualAppliance --next-hop-ip-address $hub1_nva_private_ext_ip -o none
az network route-table route create -g $rg --route-table-name $hub2_nva_name-rt --name to-$onprem1_vnet_name --address-prefix $onprem1_vnet_address --next-hop-type VirtualAppliance --next-hop-ip-address $hub1_nva_private_ext_ip -o none
az network route-table route create -g $rg --route-table-name $hub2_nva_name-rt --name to-$onprem2_vnet_name --address-prefix $onprem2_vnet_address --next-hop-type VirtualNetworkGateway -o none
az network vnet subnet update -g $rg --vnet-name $hub2_vnet_name -n $hub2_nva_subnet_name --route-table $hub2_nva_name-rt -o none

# hub1 route server
echo -e "\e[1;36mDeploying $hub1_rs_name Azure Route Server Resource in $hub1_vnet_name...\e[0m"
az network public-ip create -n $hub1_rs_name-pubip -g $rg -l $location1 --allocation-method Static --sku Standard -o none
rs_subnet_id=$(az network vnet subnet show -g $rg -n RouteServerSubnet --vnet-name $hub1_vnet_name --query id -o tsv)
az network routeserver create -g $rg -n $hub1_rs_name -l $location1 --hosted-subnet $rs_subnet_id --public-ip-address $hub1_rs_name-pubip --verbose -o none
echo -e "\e[1;36mEnabling Branch-to-Branch setting on $hub1_rs_name Azure Route Server...\e[0m"
az network routeserver update -n $hub1_rs_name -g $rg --allow-b2b-traffic true -o none
# Set Routing Preference to VpnGateway
echo -e "\e[1;36mSet Routing Preference to VpnGateway on $hub_rs_name Azure Route Server...\e[0m"
az network routeserver update -n $hub1_rs_name -g $rg --hub-routing-preference VpnGateway -o none
# hub1 route server details
echo -e "\e[1;36mGetting $hub1_rs_name Route Sever details...\e[0m"
hub1_rs_ip1=$(az network routeserver show -g $rg -n $hub1_rs_name --query virtualRouterIps[0] -o tsv) && echo $hub1_rs_name: $hub1_rs_ip1
hub1_rs_ip2=$(az network routeserver show -g $rg -n $hub1_rs_name --query virtualRouterIps[1] -o tsv) && echo $hub1_rs_name: $hub1_rs_ip2
hub1_rs_asn=$(az network routeserver show -g $rg -n $hub1_rs_name --query virtualRouterAsn -o tsv) && echo $hub1_rs_name: $hub1_rs_asn

# Create BGP Peering between hub1 RouteServer and hub1 NVA
echo -e "\e[1;36mCreating a BGP peering connection between $hub1_rs_name Azure Route Server and $hub1_nva_name VM...\e[0m"
az network routeserver peering create -g $rg -n $hub1_nva_name-peering --routeserver $hub1_rs_name  --peer-ip $hub1_nva_private_ext_ip --peer-asn $hub1_nva_asn --no-wait -o none

# hub2 route server
echo -e "\e[1;36mDeploying $hub2_rs_name Azure Route Server Resource in $hub2_vnet_name...\e[0m"
az network public-ip create -n $hub2_rs_name-pubip -g $rg -l $location2 --allocation-method Static --sku Standard -o none
rs_subnet_id=$(az network vnet subnet show -g $rg -n RouteServerSubnet --vnet-name $hub2_vnet_name --query id -o tsv)
az network routeserver create -g $rg -n $hub2_rs_name -l $location2 --hosted-subnet $rs_subnet_id --public-ip-address $hub2_rs_name-pubip --verbose -o none
echo -e "\e[1;36mEnabling Branch-to-Branch setting on $hub2_rs_name Azure Route Server...\e[0m"
az network routeserver update -n $hub2_rs_name -g $rg --allow-b2b-traffic true -o none
# Set Routing Preference to VpnGateway
echo -e "\e[1;36mSet Routing Preference to VpnGateway on $hub_rs_name Azure Route Server...\e[0m"
az network routeserver update -n $hub2_rs_name -g $rg --hub-routing-preference VpnGateway -o none
# hub2 route server details
echo -e "\e[1;36mGetting $hub2_rs_name Route Sever details...\e[0m"
hub2_rs_ip1=$(az network routeserver show -g $rg -n $hub2_rs_name --query virtualRouterIps[0] -o tsv) && echo $hub2_rs_name: $hub2_rs_ip1
hub2_rs_ip2=$(az network routeserver show -g $rg -n $hub2_rs_name --query virtualRouterIps[1] -o tsv) && echo $hub2_rs_name: $hub2_rs_ip2
hub2_rs_asn=$(az network routeserver show -g $rg -n $hub2_rs_name --query virtualRouterAsn -o tsv) && echo $hub2_rs_name: $hub2_rs_asn

# Create BGP Peering between hub2 RouteServer and hub2 NVA
echo -e "\e[1;36mCreating a BGP peering connection between $hub2_rs_name Azure Route Server and $hub2_nva_name VM...\e[0m"
az network routeserver peering create -g $rg -n $hub2_nva_name-peering --routeserver $hub2_rs_name  --peer-ip $hub2_nva_private_ext_ip --peer-asn $hub2_nva_asn --no-wait -o none

# spoke11 vnet
echo -e "\e[1;36mCreating $spoke11_vnet_name VNet...\e[0m"
az network vnet create -g $rg -n $spoke11_vnet_name -l $location1 --address-prefixes $spoke11_vnet_address --subnet-name $spoke11_subnet_name --subnet-prefixes $spoke11_subnet_address -o none
# spoke12 vnet
echo -e "\e[1;36mCreating $spoke12_vnet_name VNet...\e[0m"
az network vnet create -g $rg -n $spoke12_vnet_name -l $location1 --address-prefixes $spoke12_vnet_address --subnet-name $spoke12_subnet_name --subnet-prefixes $spoke12_subnet_address -o none
# spoke21 vnet
echo -e "\e[1;36mCreating $spoke21_vnet_name VNet...\e[0m"
az network vnet create -g $rg -n $spoke21_vnet_name -l $location2 --address-prefixes $spoke21_vnet_address --subnet-name $spoke21_subnet_name --subnet-prefixes $spoke21_subnet_address -o none
# spoke22 vnet
echo -e "\e[1;36mCreating $spoke22_vnet_name VNet...\e[0m"
az network vnet create -g $rg -n $spoke22_vnet_name -l $location2 --address-prefixes $spoke22_vnet_address --subnet-name $spoke22_subnet_name --subnet-prefixes $spoke22_subnet_address -o none
# onprem1 vnet
echo -e "\e[1;36mCreating $onprem1_vnet_name VNet...\e[0m"
az network vnet create -g $rg -n $onprem1_vnet_name -l $location1 --address-prefixes $onprem1_vnet_address --subnet-name $onprem1_vm_subnet_name --subnet-prefixes $onprem1_vm_subnet_address -o none
az network vnet subnet create -g $rg -n $onprem1_gw_subnet_name --address-prefixes $onprem1_gw_subnet_address --vnet-name $onprem1_vnet_name -o none
# onprem2 vnet
echo -e "\e[1;36mCreating $onprem2_vnet_name VNet...\e[0m"
az network vnet create -g $rg -n $onprem2_vnet_name -l $location2 --address-prefixes $onprem2_vnet_address --subnet-name $onprem2_vm_subnet_name --subnet-prefixes $onprem2_vm_subnet_address -o none
az network vnet subnet create -g $rg -n $onprem2_gw_subnet_name --address-prefixes $onprem2_gw_subnet_address --vnet-name $onprem2_vnet_name -o none

# hub1 vnet peering
echo -e "\e[1;36mEstablishing VNet Peering between $hub1_vnet_name and $spoke11_vnet_name VNets...\e[0m"
az network vnet peering create -n $hub1_vnet_name-to-$spoke11_vnet_name -g $rg --vnet-name $hub1_vnet_name --remote-vnet $spoke11_vnet_name --allow-vnet-access --allow-forwarded-traffic --allow-gateway-transit -o none
az network vnet peering create -n $spoke11_vnet_name-to-$hub1_vnet_name -g $rg --vnet-name $spoke11_vnet_name --remote-vnet $hub1_vnet_name --allow-vnet-access --allow-forwarded-traffic --use-remote-gateways -o none
echo -e "\e[1;36mEstablishing VNet Peering between $hub1_vnet_name and $spoke12_vnet_name VNets...\e[0m"
az network vnet peering create -n $hub1_vnet_name-to-$spoke12_vnet_name -g $rg --vnet-name $hub1_vnet_name --remote-vnet $spoke12_vnet_name --allow-vnet-access --allow-forwarded-traffic --allow-gateway-transit -o none
az network vnet peering create -n $spoke12_vnet_name-to-$hub1_vnet_name -g $rg --vnet-name $spoke12_vnet_name --remote-vnet $hub1_vnet_name --allow-vnet-access --allow-forwarded-traffic --use-remote-gateways -o none

# hub2 vnet peering
echo -e "\e[1;36mEstablishing VNet Peering between $hub2_vnet_name and $spoke21_vnet_name VNets...\e[0m"
az network vnet peering create -n $hub2_vnet_name-to-$spoke21_vnet_name -g $rg --vnet-name $hub2_vnet_name --remote-vnet $spoke21_vnet_name --allow-vnet-access --allow-forwarded-traffic --allow-gateway-transit -o none
az network vnet peering create -n $spoke21_vnet_name-to-$hub2_vnet_name -g $rg --vnet-name $spoke21_vnet_name --remote-vnet $hub2_vnet_name --allow-vnet-access --allow-forwarded-traffic --use-remote-gateways -o none
echo -e "\e[1;36mEstablishing VNet Peering between $hub2_vnet_name and $spoke22_vnet_name VNets...\e[0m"
az network vnet peering create -n $hub2_vnet_name-to-$spoke22_vnet_name -g $rg --vnet-name $hub2_vnet_name --remote-vnet $spoke22_vnet_name --allow-vnet-access --allow-forwarded-traffic --allow-gateway-transit -o none
az network vnet peering create -n $spoke22_vnet_name-to-$hub2_vnet_name -g $rg --vnet-name $spoke22_vnet_name --remote-vnet $hub2_vnet_name --allow-vnet-access --allow-forwarded-traffic --use-remote-gateways -o none


# ##########################
# # Hub1 NVA Configuration #
# ##########################
echo -e "\e[1;36mCreating BGP and S2S VPN Config files for $hub1_nva_name VM...\e[0m"
# frr.donf
frr_conf_file=~/frr.conf
cat <<EOF > $frr_conf_file
frr version 8.2
frr defaults traditional
hostname $hub1_nva_name
log syslog informational
no ipv6 forwarding
service integrated-vtysh-config
!
ip route $hub1_rs_ip2/32 $nva1_ext_gw_ip
ip route $hub1_rs_ip1/32 $nva1_ext_gw_ip
ip route $hub2_nva_private_ext_ip/32 $nva1_ext_gw_ip
ip route $network_address_summary $nva1_ext_gw_ip
!
router bgp $hub1_nva_asn
 bgp router-id $hub1_nva_private_ext_ip
 no bgp ebgp-requires-policy
 neighbor $hub2_nva_private_ext_ip remote-as $hub2_nva_asn
 neighbor $hub2_nva_private_ext_ip description $hub2_nva_name
 neighbor $hub2_nva_private_ext_ip ebgp-multihop 2
 neighbor $hub1_rs_ip2 remote-as $hub1_rs_asn
 neighbor $hub1_rs_ip2 description $hub1_rs_name-1
 neighbor $hub1_rs_ip2 ebgp-multihop 2
 neighbor $hub1_rs_ip1 remote-as $hub1_rs_asn
 neighbor $hub1_rs_ip1 description $hub1_rs_name-2
 neighbor $hub1_rs_ip1 ebgp-multihop 2
 !
 address-family ipv4 unicast
  network $network_address_summary
  neighbor $hub1_rs_ip2 soft-reconfiguration inbound
  neighbor $hub1_rs_ip1 soft-reconfiguration inbound
  neighbor $hub2_nva_private_ext_ip soft-reconfiguration inbound
  neighbor $hub2_nva_private_ext_ip remove-private-AS
 exit-address-family
exit
!
EOF

##### copy files to hub1 nva
echo -e "\e[1;36mCopying and applying BGP config files to $hub1_nva_name VM...\e[0m"
scp -o StrictHostKeyChecking=no $frr_conf_file $hub1_nva_pubip:/home/$admin_username
scp -o StrictHostKeyChecking=no .ssh/* $hub1_nva_pubip:/home/$admin_username/.ssh/
# enable NAT, apply frr config files
ssh -n -o BatchMode=yes -o StrictHostKeyChecking=no $hub1_nva_pubip "sudo iptables -t nat -A POSTROUTING -o eth0 -j MASQUERADE"
ssh -n -o BatchMode=yes -o StrictHostKeyChecking=no $hub1_nva_pubip "sudo mv /home/$admin_username/frr.conf /etc/frr/frr.conf && sudo service frr restart"
# clean up config files
rm $frr_conf_file


##########################
# hub2 NVA Configuration #
##########################
echo -e "\e[1;36mCreating BGP and S2S VPN Config files for $hub2_nva_name VM...\e[0m"

# # frr.donf
frr_conf_file=~/frr.conf
cat <<EOF > $frr_conf_file
frr version 8.2
frr defaults traditional
hostname $hub2_nva_name
log syslog informational
no ipv6 forwarding
service integrated-vtysh-config
!
ip route $hub1_nva_private_ext_ip/32 $nva2_ext_gw_ip
ip route $hub2_rs_ip2/32 $nva2_ext_gw_ip
ip route $hub2_rs_ip1/32 $nva2_ext_gw_ip
ip route $network_address_summary $nva2_ext_gw_ip
!
router bgp $hub2_nva_asn
 bgp router-id $hub2_nva_private_ext_ip
 no bgp ebgp-requires-policy
 neighbor $hub1_nva_private_ext_ip remote-as $hub1_nva_asn
 neighbor $hub1_nva_private_ext_ip description $hub1_nva_name
 neighbor $hub1_nva_private_ext_ip ebgp-multihop 2
 neighbor $hub2_rs_ip2 remote-as $hub2_rs_asn
 neighbor $hub2_rs_ip2 description $hub2_rs_name-1
 neighbor $hub2_rs_ip2 ebgp-multihop 2
 neighbor $hub2_rs_ip1 remote-as $hub2_rs_asn
 neighbor $hub2_rs_ip1 description $hub2_rs_name-2
 neighbor $hub2_rs_ip1 ebgp-multihop 2
 !
 address-family ipv4 unicast
  network $network_address_summary
  neighbor $hub1_nva_private_ext_ip soft-reconfiguration inbound
  neighbor $hub1_nva_private_ext_ip remove-private-AS
  neighbor $hub2_rs_ip2 soft-reconfiguration inbound
  neighbor $hub2_rs_ip1 soft-reconfiguration inbound

 exit-address-family
exit
!
EOF

##### copy files to hub2 nva
echo -e "\e[1;36mCopying and applying BGP config files to $hub2_nva_name VM...\e[0m"
scp -o StrictHostKeyChecking=no $frr_conf_file $hub2_nva_pubip:/home/$admin_username
scp -o StrictHostKeyChecking=no .ssh/* $hub2_nva_pubip:/home/$admin_username/.ssh/
# enable NAT, apply frr config files
ssh -n -o BatchMode=yes -o StrictHostKeyChecking=no $hub2_nva_pubip "sudo iptables -t nat -A POSTROUTING -o eth0 -j MASQUERADE"
ssh -n -o BatchMode=yes -o StrictHostKeyChecking=no $hub2_nva_pubip "sudo mv /home/$admin_username/frr.conf /etc/frr/frr.conf && sudo service frr restart"
# clean up config files
rm $frr_conf_file

# Hub1 VPN GW
echo -e "\e[1;36mDeploying $hub1_gw_name VPN Gateway...\e[0m"
az network public-ip create -g $rg -n $hub1_gw_name-pubip1 -l $location1 --allocation-method Dynamic -o none
az network public-ip create -g $rg -n $hub1_gw_name-pubip2 -l $location1 --allocation-method Dynamic -o none
az network vnet-gateway create -g $rg -n $hub1_gw_name -l $location1 --public-ip-addresses $hub1_gw_name-pubip1 $hub1_gw_name-pubip2 --vnet $hub1_vnet_name --asn $hub1_gw_asn --sku VpnGw1 --gateway-type Vpn --vpn-type RouteBased --no-wait
# hub2 VPN GW
echo -e "\e[1;36mDeploying $hub2_gw_name VPN Gateway...\e[0m"
az network public-ip create -g $rg -n $hub2_gw_name-pubip1 -l $location2 --allocation-method Dynamic -o none
az network public-ip create -g $rg -n $hub2_gw_name-pubip2 -l $location2 --allocation-method Dynamic -o none
az network vnet-gateway create -g $rg -n $hub2_gw_name -l $location2 --public-ip-addresses $hub2_gw_name-pubip1 $hub2_gw_name-pubip2 --vnet $hub2_vnet_name --asn $hub2_gw_asn --sku VpnGw1 --gateway-type Vpn --vpn-type RouteBased --no-wait

# onprem1 gw
echo -e "\e[1;36mDeploying $onprem1_gw_vm_name VM...\e[0m"
az network public-ip create -n "$onprem1_gw_vm_name-pubip" -g $rg -l $location1 --allocation-method Static --sku Basic -o none
az network nic create -n "$onprem1_gw_vm_name-ext-nic" -l $location1 --vnet-name $onprem1_vnet_name -g $rg --subnet $onprem1_gw_subnet_name --ip-forwarding true --public-ip-address "$onprem1_gw_vm_name-pubip" -o none
az network nic create -n "$onprem1_gw_vm_name-int-nic" -l $location1 --vnet-name $onprem1_vnet_name -g $rg --subnet $onprem1_vm_subnet_name --ip-forwarding true -o none
az vm create -n $onprem1_gw_vm_name -g $rg -l $location1 --image $vm_image --nics "$onprem1_gw_vm_name-ext-nic" "$onprem1_gw_vm_name-int-nic" --os-disk-name "$onprem1_gw_vm_name-disk" --size $vm_size --admin-username $admin_username --generate-ssh-keys --custom-data $cloudinit_file  --no-wait
# onprem1 gw details
onprem1_gw_pubip=$(az network public-ip show -g $rg -n $onprem1_gw_vm_name-pubip --query ipAddress -o tsv) && echo $onprem1_gw_vm_name: $onprem1_gw_pubip
onprem1_gw_ext_private_ip=$(az network nic show -g $rg -n $onprem1_gw_vm_name-ext-nic --query ipConfigurations[].privateIPAddress -o tsv)  && echo $onprem1_gw_vm_name external NIC IP: $onprem1_gw_ext_private_ip
onprem1_gw_ext_gw_ip=$(first_ip $onprem1_gw_subnet_address) && echo $onprem1_gw_vm_name external NIC default gateway IP: $onprem1_gw_ext_gw_ip

# onprem2 gw
echo -e "\e[1;36mDeploying $onprem2_gw_vm_name VM...\e[0m"
az network public-ip create -n "$onprem2_gw_vm_name-pubip" -g $rg -l $location2 --allocation-method Static --sku Basic -o none
az network nic create -n "$onprem2_gw_vm_name-ext-nic" -l $location2 --vnet-name $onprem2_vnet_name -g $rg --subnet $onprem2_gw_subnet_name --ip-forwarding true --public-ip-address "$onprem2_gw_vm_name-pubip" -o none
az network nic create -n "$onprem2_gw_vm_name-int-nic" -l $location2 --vnet-name $onprem2_vnet_name -g $rg --subnet $onprem2_vm_subnet_name --ip-forwarding true -o none
az vm create -n $onprem2_gw_vm_name -g $rg -l $location2 --image $vm_image --nics "$onprem2_gw_vm_name-ext-nic" "$onprem2_gw_vm_name-int-nic" --os-disk-name "$onprem2_gw_vm_name-disk" --size $vm_size --admin-username $admin_username --generate-ssh-keys --custom-data $cloudinit_file  --no-wait
# onprem2 gw details:
onprem2_gw_pubip=$(az network public-ip show -g $rg -n $onprem2_gw_vm_name-pubip --query ipAddress -o tsv) && echo $onprem2_gw_vm_name: $onprem2_gw_pubip
onprem2_gw_ext_private_ip=$(az network nic show -g $rg -n $onprem2_gw_vm_name-ext-nic --query ipConfigurations[].privateIPAddress -o tsv) && echo $onprem2_gw_vm_name external NIC IP: $onprem2_gw_ext_private_ip
onprem2_gw_ext_gw_ip=$(first_ip $onprem2_gw_subnet_address) && echo $onprem2_gw_vm_name external NIC default gateway IP: $onprem2_gw_ext_gw_ip

# hub1 vm
echo -e "\e[1;36mDeploying $hub1_vm_name VM...\e[0m"
az network nic create -n "$hub1_vm_name-nic" -l $location1 --vnet-name $hub1_vnet_name -g $rg --subnet $hub1_vms_subnet_name -o none
az vm create -n $hub1_vm_name -g $rg -l $location1 --image $vm_image --nics "$hub1_vm_name-nic" --os-disk-name "$hub1_vm_name-disk" --size $vm_size --admin-username $admin_username --generate-ssh-keys --no-wait

# hub2 vm
echo -e "\e[1;36mDeploying $hub2_vm_name VM...\e[0m"
az network nic create -n "$hub2_vm_name-nic" -l $location2 --vnet-name $hub2_vnet_name -g $rg --subnet $hub2_vms_subnet_name -o none
az vm create -n $hub2_vm_name -g $rg -l $location2 --image $vm_image --nics "$hub2_vm_name-nic" --os-disk-name "$hub2_vm_name-disk" --size $vm_size --admin-username $admin_username --generate-ssh-keys --no-wait

# spoke11 vm
echo -e "\e[1;36mDeploying $spoke11_vm_name VM...\e[0m"
az network nic create -n "$spoke11_vm_name-nic" -l $location1 --vnet-name $spoke11_vnet_name -g $rg --subnet $spoke11_subnet_name -o none
az vm create -n $spoke11_vm_name -g $rg -l $location1 --image $vm_image --nics "$spoke11_vm_name-nic" --os-disk-name "$spoke11_vm_name-disk" --size $vm_size --admin-username $admin_username --generate-ssh-keys --no-wait

# spoke12 vm
echo -e "\e[1;36mDeploying $spoke12_vm_name VM...\e[0m"
az network nic create -n "$spoke12_vm_name-nic" -l $location1 --vnet-name $spoke12_vnet_name -g $rg --subnet $spoke12_subnet_name -o none
az vm create -n $spoke12_vm_name -g $rg -l $location1 --image $vm_image --nics "$spoke12_vm_name-nic" --os-disk-name "$spoke12_vm_name-disk" --size $vm_size --admin-username $admin_username --generate-ssh-keys --no-wait

# spoke21 vm
echo -e "\e[1;36mDeploying $spoke21_vm_name VM...\e[0m"
az network nic create -n "$spoke21_vm_name-nic" -l $location2 --vnet-name $spoke21_vnet_name -g $rg --subnet $spoke21_subnet_name -o none
az vm create -n $spoke21_vm_name -g $rg -l $location2 --image $vm_image --nics "$spoke21_vm_name-nic" --os-disk-name "$spoke21_vm_name-disk" --size $vm_size --admin-username $admin_username --generate-ssh-keys --no-wait

# spoke22 vm
echo -e "\e[1;36mDeploying $spoke22_vm_name VM...\e[0m"
az network nic create -n "$spoke22_vm_name-nic" -l $location2 --vnet-name $spoke22_vnet_name -g $rg --subnet $spoke22_subnet_name -o none
az vm create -n $spoke22_vm_name -g $rg -l $location2 --image $vm_image --nics "$spoke22_vm_name-nic" --os-disk-name "$spoke22_vm_name-disk" --size $vm_size --admin-username $admin_username --generate-ssh-keys --no-wait

# onprem1 vm
echo -e "\e[1;36mDeploying $onprem1_vm_name VM...\e[0m"
az network nic create -n "$onprem1_vm_name-nic" -l $location1 --vnet-name $onprem1_vnet_name -g $rg --subnet $onprem1_vm_subnet_name -o none
az vm create -n $onprem1_vm_name -g $rg -l $location1 --image $vm_image --nics "$onprem1_vm_name-nic" --os-disk-name "$onprem1_vm_name-disk" --size $vm_size --admin-username $admin_username --generate-ssh-keys --no-wait

# onprem2 vm
echo -e "\e[1;36mDeploying $onprem2_vm_name VM...\e[0m"
az network nic create -n "$onprem2_vm_name-nic" -l $location2 --vnet-name $onprem2_vnet_name -g $rg --subnet $onprem2_vm_subnet_name -o none
az vm create -n $onprem2_vm_name -g $rg -l $location2 --image $vm_image --nics "$onprem2_vm_name-nic" --os-disk-name "$onprem2_vm_name-disk" --size $vm_size --admin-username $admin_username --generate-ssh-keys --no-wait

# local gateway1
echo -e "\e[1;36mDeploying $onprem1_gw_vm_name local gateway resource...\e[0m"
az network local-gateway create -g $rg -n $onprem1_gw_vm_name -l $location1 --gateway-ip-address $onprem1_gw_pubip --asn $onprem1_gw_asn --bgp-peering-address $onprem1_gw_ext_private_ip --local-address-prefixes $onprem1_vnet_address -o none

# local gateway2
echo -e "\e[1;36mDeploying $onprem2_gw_vm_name local gateway resource...\e[0m"
az network local-gateway create -g $rg -n $onprem2_gw_vm_name -l $location2 --gateway-ip-address $onprem2_gw_pubip --asn $onprem2_gw_asn --bgp-peering-address $onprem2_gw_ext_private_ip --local-address-prefixes $onprem2_vnet_address -o none

# onprem1 route table
echo -e "\e[1;36mDeploying $onprem1_vnet_name-rt Route Table and attaching it to $onprem1_vm_subnet_name subnet...\e[0m"
az network route-table create -n $onprem1_vnet_name-rt -g $rg -l $location1 -o none
az network route-table route create --address-prefix $hub1_vnet_address -n to-$hub1_vnet_name -g $rg --next-hop-type VirtualAppliance --route-table-name $onprem1_vnet_name-rt --next-hop-ip-address $onprem1_gw_ext_private_ip -o none
az network route-table route create --address-prefix $hub2_vnet_address -n to-$hub2_vnet_name -g $rg --next-hop-type VirtualAppliance --route-table-name $onprem1_vnet_name-rt --next-hop-ip-address $onprem1_gw_ext_private_ip -o none
az network route-table route create --address-prefix $spoke11_vnet_address -n to-$spoke11_vnet_name -g $rg --next-hop-type VirtualAppliance --route-table-name $onprem1_vnet_name-rt --next-hop-ip-address $onprem1_gw_ext_private_ip -o none
az network route-table route create --address-prefix $spoke12_vnet_address -n to_$spoke12_vnet_name -g $rg --next-hop-type VirtualAppliance --route-table-name $onprem1_vnet_name-rt --next-hop-ip-address $onprem1_gw_ext_private_ip -o none
az network route-table route create --address-prefix $spoke21_vnet_address -n to-$spoke21_vnet_name -g $rg --next-hop-type VirtualAppliance --route-table-name $onprem1_vnet_name-rt --next-hop-ip-address $onprem1_gw_ext_private_ip -o none
az network route-table route create --address-prefix $spoke22_vnet_address -n to_$spoke22_vnet_name -g $rg --next-hop-type VirtualAppliance --route-table-name $onprem1_vnet_name-rt --next-hop-ip-address $onprem1_gw_ext_private_ip -o none
az network route-table route create --address-prefix $onprem2_vnet_address -n to_$onprem2_vnet_name -g $rg --next-hop-type VirtualAppliance --route-table-name $onprem1_vnet_name-rt --next-hop-ip-address $onprem1_gw_ext_private_ip -o none
az network vnet subnet update --vnet-name $onprem1_vnet_name -n $onprem1_vm_subnet_name --route-table $onprem1_vnet_name-rt -g $rg -o none

# onprem2 route table
echo -e "\e[1;36mDeploying $onprem2_vnet_name-rt Route Table and attaching it to $onprem2_vm_subnet_name subnet...\e[0m"
az network route-table create -n $onprem2_vnet_name-rt -g $rg -l $location2 -o none
az network route-table route create --address-prefix $hub1_vnet_address -n to-$hub1_vnet_name -g $rg --next-hop-type VirtualAppliance --route-table-name $onprem2_vnet_name-rt --next-hop-ip-address $onprem2_gw_ext_private_ip -o none
az network route-table route create --address-prefix $hub2_vnet_address -n to-$hub2_vnet_name -g $rg --next-hop-type VirtualAppliance --route-table-name $onprem2_vnet_name-rt --next-hop-ip-address $onprem2_gw_ext_private_ip -o none
az network route-table route create --address-prefix $spoke11_vnet_address -n to-$spoke11_vnet_name -g $rg --next-hop-type VirtualAppliance --route-table-name $onprem2_vnet_name-rt --next-hop-ip-address $onprem2_gw_ext_private_ip -o none
az network route-table route create --address-prefix $spoke12_vnet_address -n to_$spoke12_vnet_name -g $rg --next-hop-type VirtualAppliance --route-table-name $onprem2_vnet_name-rt --next-hop-ip-address $onprem2_gw_ext_private_ip -o none
az network route-table route create --address-prefix $spoke21_vnet_address -n to-$spoke21_vnet_name -g $rg --next-hop-type VirtualAppliance --route-table-name $onprem2_vnet_name-rt --next-hop-ip-address $onprem2_gw_ext_private_ip -o none
az network route-table route create --address-prefix $spoke22_vnet_address -n to_$spoke22_vnet_name -g $rg --next-hop-type VirtualAppliance --route-table-name $onprem2_vnet_name-rt --next-hop-ip-address $onprem2_gw_ext_private_ip -o none
az network route-table route create --address-prefix $onprem1_vnet_address -n to_$onprem1_vnet_name -g $rg --next-hop-type VirtualAppliance --route-table-name $onprem2_vnet_name-rt --next-hop-ip-address $onprem2_gw_ext_private_ip -o none
az network vnet subnet update --vnet-name $onprem2_vnet_name -n $onprem2_vm_subnet_name --route-table $onprem2_vnet_name-rt -g $rg -o none

# waiting on hub1 vpn gw to finish deployment
hub1_gw_id=$(az network vnet-gateway show -g $rg -n $hub1_gw_name --query id -o tsv)
wait_until_finished $hub1_gw_id
# waiting on hub2 vpn gw to finish deployment
hub2_gw_id=$(az network vnet-gateway show -g $rg -n $hub2_gw_name --query id -o tsv)
wait_until_finished $hub2_gw_id


# Getting hub1 VPN GW details
echo -e "\e[1;36mGetting $hub1_gw_name VPN Gateway details...\e[0m"
hub1_gw_pubip1=$(az network vnet-gateway show -n $hub1_gw_name -g $rg --query 'bgpSettings.bgpPeeringAddresses[0].tunnelIpAddresses[0]' -o tsv) && echo $hub1_gw_name: $hub1_gw_pubip1
hub1_gw_pubip2=$(az network vnet-gateway show -n $hub1_gw_name -g $rg --query 'bgpSettings.bgpPeeringAddresses[1].tunnelIpAddresses[0]' -o tsv) && echo $hub1_gw_name: $hub1_gw_pubip2
hub1_gw_bgp_ip1=$(az network vnet-gateway show -n $hub1_gw_name -g $rg --query 'bgpSettings.bgpPeeringAddresses[0].defaultBgpIpAddresses[0]' -o tsv) && echo $hub1_gw_name: $hub1_gw_bgp_ip1
hub1_gw_bgp_ip2=$(az network vnet-gateway show -n $hub1_gw_name -g $rg --query 'bgpSettings.bgpPeeringAddresses[1].defaultBgpIpAddresses[0]' -o tsv) && echo $hub1_gw_name: $hub1_gw_bgp_ip2
hub1_gw_asn=$(az network vnet-gateway show -n $hub1_gw_name -g $rg --query bgpSettings.asn -o tsv) && echo $hub1_gw_name: $hub1_gw_asn

# Getting hub2 VPN GW details
echo -e "\e[1;36mGetting $hub2_gw_name VPN Gateway details...\e[0m"
hub2_gw_pubip1=$(az network vnet-gateway show -n $hub2_gw_name -g $rg --query 'bgpSettings.bgpPeeringAddresses[0].tunnelIpAddresses[0]' -o tsv) && echo $hub2_gw_name: $hub2_gw_pubip1
hub2_gw_pubip2=$(az network vnet-gateway show -n $hub2_gw_name -g $rg --query 'bgpSettings.bgpPeeringAddresses[1].tunnelIpAddresses[0]' -o tsv) && echo $hub2_gw_name: $hub2_gw_pubip2
hub2_gw_bgp_ip1=$(az network vnet-gateway show -n $hub2_gw_name -g $rg --query 'bgpSettings.bgpPeeringAddresses[0].defaultBgpIpAddresses[0]' -o tsv) && echo $hub2_gw_name: $hub2_gw_bgp_ip1
hub2_gw_bgp_ip2=$(az network vnet-gateway show -n $hub2_gw_name -g $rg --query 'bgpSettings.bgpPeeringAddresses[1].defaultBgpIpAddresses[0]' -o tsv) && echo $hub2_gw_name: $hub2_gw_bgp_ip2
hub2_gw_asn=$(az network vnet-gateway show -n $hub2_gw_name -g $rg --query bgpSettings.asn -o tsv) && echo $hub2_gw_name: $hub2_gw_asn


# # updating nva1 rt 
# az network route-table route create -g $rg --route-table-name $hub1_nva_name-rt --name to-$onprem1_vnet_name --address-prefix $onprem1_vnet_address --next-hop-type VirtualAppliance --next-hop-ip-address $hub1_gw_bgp_ip1 -o none

# # updating nva2 rt
# az network route-table route create -g $rg --route-table-name $hub2_nva_name-rt --name to-$onprem2_vnet_name --address-prefix $onprem2_vnet_address --next-hop-type VirtualAppliance --next-hop-ip-address $hub2_gw_bgp_ip1 -o none

# creating VPN connection between hub1 vpn gw and onprem1 gw
echo -e "\e[1;36mCreating VPN Connection between Azure VPN Gateway $hub1_gw_name and Onprem Gateway $onprem1_gw_vm_name...\e[0m"
az network vpn-connection create -g $rg -n $hub1_vnet_name-to-$onprem1_vnet_name -l $location1 --vnet-gateway1 $hub1_gw_name --local-gateway2 $onprem1_gw_vm_name --shared-key $psk --enable-bgp -o none

# creating VPN connection between hub2 vpn gw and onprem2 gw
echo -e "\e[1;36mCreating VPN Connection between Azure VPN Gateway $hub1_gw_name and Onprem Gateway $onprem2_gw_vm_name...\e[0m"
az network vpn-connection create -g $rg -n $hub2_vnet_name-to-$onprem2_vnet_name -l $location2 --vnet-gateway1 $hub2_gw_name --local-gateway2 $onprem2_gw_vm_name --shared-key $psk --enable-bgp -o none

#######################
# OnPrem1 VPN Config   #
#######################
echo -e "\e[1;36mCreating S2S/BGP VPN Config files for $onprem1_gw_vm_name Gateway VM...\e[0m"
# ipsec.secrets
psk_file=~/ipsec.secrets
cat <<EOF > $psk_file
$onprem1_gw_pubip $hub1_gw_pubip1 : PSK $psk
$onprem1_gw_pubip $hub1_gw_pubip2 : PSK $psk
EOF

# ipsec.conf
ipsec_file=~/ipsec.conf
cat <<EOF > $ipsec_file
conn %default
         # Authentication Method : Pre-Shared Key
         leftauth=psk
         rightauth=psk
         ike=aes256-sha1-modp1024!
         ikelifetime=28800s
         # Phase 1 Negotiation Mode : main
         aggressive=no
         esp=aes256-sha1!
         lifetime=3600s
         keylife=3600s
         type=tunnel
         dpddelay=10s
         dpdtimeout=30s
         keyexchange=ikev2
         rekey=yes
         reauth=no
         dpdaction=restart
         closeaction=restart
         leftsubnet=0.0.0.0/0,::/0
         rightsubnet=0.0.0.0/0,::/0
         leftupdown=/etc/strongswan.d/ipsec-vti.sh
         installpolicy=yes
         compress=no
         mobike=no
conn Azure1
         # OnPrem Gateway Private IP Address :
         left=$onprem1_gw_ext_private_ip
         # OnPrem Gateway Public IP Address :
         leftid=$onprem1_gw_pubip
         # Azure VPN Gateway Public IP address :
         right=$hub1_gw_pubip1
         rightid=$hub1_gw_pubip1
         auto=start
         # unique number per IPSEC Tunnel eg. 100, 101 etc
         mark=101
conn Azure2
         # OnPrem Gateway Private IP Address :
         left=$onprem1_gw_ext_private_ip
         # OnPrem Gateway Public IP Address :
         leftid=$onprem1_gw_pubip
         # Azure VPN Gateway Public IP address :
         right=$hub1_gw_pubip2
         rightid=$hub1_gw_pubip2
         auto=start
         # unique number per IPSEC Tunnel eg. 100, 101 etc
         mark=102
EOF


# ipsec-vti.sh
onprem1_gw_vti_address1=172.16.0.11
onprem1_gw_vti_address2=172.16.0.12
ipsec_vti_file=~/ipsec-vti.sh
tee -a $ipsec_vti_file > /dev/null <<'EOT'
#!/bin/bash

#
# /etc/strongswan.d/ipsec-vti.sh
#

IP=$(which ip)
IPTABLES=$(which iptables)
PLUTO_MARK_OUT_ARR=(${PLUTO_MARK_OUT//// })
PLUTO_MARK_IN_ARR=(${PLUTO_MARK_IN//// })
case "$PLUTO_CONNECTION" in
  Azure1)
    VTI_INTERFACE=vti0
    VTI_LOCALADDR=$onprem1_gw_vti_address1/32
    VTI_REMOTEADDR=$hub1_gw_bgp_ip1/32
    ;;
  Azure2)
    VTI_INTERFACE=vti1
    VTI_LOCALADDR=$onprem1_gw_vti_address2/32
    VTI_REMOTEADDR=$hub1_gw_bgp_ip2/32
    ;;
esac
case "${PLUTO_VERB}" in
    up-client)
        $IP link add ${VTI_INTERFACE} type vti local ${PLUTO_ME} remote ${PLUTO_PEER} okey ${PLUTO_MARK_OUT_ARR[0]} ikey ${PLUTO_MARK_IN_ARR[0]}
        sysctl -w net.ipv4.conf.${VTI_INTERFACE}.disable_policy=1
        sysctl -w net.ipv4.conf.${VTI_INTERFACE}.rp_filter=2 || sysctl -w net.ipv4.conf.${VTI_INTERFACE}.rp_filter=0
        $IP addr add ${VTI_LOCALADDR} remote ${VTI_REMOTEADDR} dev ${VTI_INTERFACE}
        $IP link set ${VTI_INTERFACE} up mtu 1350
        $IPTABLES -t mangle -I FORWARD -o ${VTI_INTERFACE} -p tcp -m tcp --tcp-flags SYN,RST SYN -j TCPMSS --clamp-mss-to-pmtu
        $IPTABLES -t mangle -I INPUT -p esp -s ${PLUTO_PEER} -d ${PLUTO_ME} -j MARK --set-xmark ${PLUTO_MARK_IN}
        $IP route flush table 220
        ;;
    down-client)
        $IP link del ${VTI_INTERFACE}
        $IPTABLES -t mangle -D FORWARD -o ${VTI_INTERFACE} -p tcp -m tcp --tcp-flags SYN,RST SYN -j TCPMSS --clamp-mss-to-pmtu
        $IPTABLES -t mangle -D INPUT -p esp -s ${PLUTO_PEER} -d ${PLUTO_ME} -j MARK --set-xmark ${PLUTO_MARK_IN}
        ;;
esac

# Enable IPv4 forwarding
sysctl -w net.ipv4.ip_forward=1
sysctl -w net.ipv4.conf.eth0.disable_xfrm=1
sysctl -w net.ipv4.conf.eth0.disable_policy=1
EOT

sed -i "/\$onprem1_gw_vti_address1/ s//$onprem1_gw_vti_address1/" $ipsec_vti_file
sed -i "/\$onprem1_gw_vti_address2/ s//$onprem1_gw_vti_address2/" $ipsec_vti_file
sed -i "/\$hub1_gw_bgp_ip1/ s//$hub1_gw_bgp_ip1/" $ipsec_vti_file
sed -i "/\$hub1_gw_bgp_ip2/ s//$hub1_gw_bgp_ip2/" $ipsec_vti_file


# frr.conf
frr_conf_file=~/frr.conf
cat <<EOF > $frr_conf_file
frr version 8.1
frr defaults traditional
hostname $onprem1_gw_vm_name
log syslog informational
no ipv6 forwarding
service integrated-vtysh-config
!
ip route $default_address1 $onprem1_gw_ext_gw_ip
ip route $default_address2 $onprem1_gw_ext_gw_ip
ip route $onprem1_vnet_address $onprem1_gw_ext_gw_ip
ip route $hub1_gw_bgp_ip1/32 $onprem1_gw_ext_gw_ip
ip route $hub1_gw_bgp_ip2/32 $onprem1_gw_ext_gw_ip
!
router bgp $onprem1_gw_asn
 bgp router-id $onprem1_gw_ext_private_ip
 no bgp ebgp-requires-policy
 neighbor $hub1_gw_bgp_ip1 remote-as $hub1_gw_asn
 neighbor $hub1_gw_bgp_ip1 description $hub1_gw_name-0
 neighbor $hub1_gw_bgp_ip1 ebgp-multihop 2
 neighbor $hub1_gw_bgp_ip2 remote-as $hub1_gw_asn
 neighbor $hub1_gw_bgp_ip2 description $hub1_gw_name-1
 neighbor $hub1_gw_bgp_ip2 ebgp-multihop 2
 !
 address-family ipv4 unicast
  network $onprem1_vnet_address
  neighbor $hub1_gw_bgp_ip1 soft-reconfiguration inbound
  neighbor $hub1_gw_bgp_ip2 soft-reconfiguration inbound
 exit-address-family
exit
!
EOF
##### copy files to onprem gw
echo -e "\e[1;36mCopying and applying S2S/BGP VPN Config files to $onprem1_gw_vm_name Gateway VM...\e[0m"
#admin_username=$(whoami)
scp -o StrictHostKeyChecking=no $psk_file $ipsec_file $ipsec_vti_file $frr_conf_file $onprem1_gw_pubip:/home/$admin_username
scp -o StrictHostKeyChecking=no .ssh/* $onprem1_gw_pubip:/home/$admin_username/.ssh/
ssh -n -o BatchMode=yes -o StrictHostKeyChecking=no $onprem1_gw_pubip "sudo iptables -t nat -A POSTROUTING -o eth0 -j MASQUERADE"
ssh -n -o BatchMode=yes -o StrictHostKeyChecking=no $onprem1_gw_pubip "sudo mv /home/$admin_username/frr.conf /etc/frr/frr.conf && sudo mv /home/$admin_username/ipsec.* /etc/ && sudo mv /home/$admin_username/ipsec-vti.sh /etc/strongswan.d/ && chmod +x /etc/strongswan.d/ipsec-vti.sh && sudo service frr restart && sudo systemctl restart ipsec"
#sudo mv /home/$admin_username/frr.conf /etc/frr/frr.conf
echo -e "\e[1;36mChecking the status of S2S VPN between $onprem1_gw_vm_name and $hub1_gw_name VPN Gateways...\e[0m"
ssh -n -o BatchMode=yes -o StrictHostKeyChecking=no $onprem1_gw_pubip "sudo ipsec status"

# clean up config files
rm $psk_file $ipsec_file $ipsec_vti_file $frr_conf_file
# clear up the cloudinit file
rm $cloudinit_file

#######################
# onprem2 VPN Config   #
#######################
echo -e "\e[1;36mCreating S2S/BGP VPN Config files for $onprem2_gw_vm_name Gateway VM...\e[0m"
# ipsec.secrets
psk_file=~/ipsec.secrets
cat <<EOF > $psk_file
$onprem2_gw_pubip $hub2_gw_pubip1 : PSK $psk
$onprem2_gw_pubip $hub2_gw_pubip2 : PSK $psk
EOF

# ipsec.conf
ipsec_file=~/ipsec.conf
cat <<EOF > $ipsec_file
conn %default
         # Authentication Method : Pre-Shared Key
         leftauth=psk
         rightauth=psk
         ike=aes256-sha1-modp1024!
         ikelifetime=28800s
         # Phase 1 Negotiation Mode : main
         aggressive=no
         esp=aes256-sha1!
         lifetime=3600s
         keylife=3600s
         type=tunnel
         dpddelay=10s
         dpdtimeout=30s
         keyexchange=ikev2
         rekey=yes
         reauth=no
         dpdaction=restart
         closeaction=restart
         leftsubnet=0.0.0.0/0,::/0
         rightsubnet=0.0.0.0/0,::/0
         leftupdown=/etc/strongswan.d/ipsec-vti.sh
         installpolicy=yes
         compress=no
         mobike=no
conn Azure1
         # OnPrem Gateway Private IP Address :
         left=$onprem2_gw_ext_private_ip
         # OnPrem Gateway Public IP Address :
         leftid=$onprem2_gw_pubip
         # Azure VPN Gateway Public IP address :
         right=$hub2_gw_pubip1
         rightid=$hub2_gw_pubip1
         auto=start
         # unique number per IPSEC Tunnel eg. 100, 101 etc
         mark=101
conn Azure2
         # OnPrem Gateway Private IP Address :
         left=$onprem2_gw_ext_private_ip
         # OnPrem Gateway Public IP Address :
         leftid=$onprem2_gw_pubip
         # Azure VPN Gateway Public IP address :
         right=$hub2_gw_pubip2
         rightid=$hub2_gw_pubip2
         auto=start
         # unique number per IPSEC Tunnel eg. 100, 101 etc
         mark=102
EOF


# ipsec-vti.sh
onprem2_gw_vti_address1=172.17.0.11
onprem2_gw_vti_address2=172.17.0.12
ipsec_vti_file=~/ipsec-vti.sh
tee -a $ipsec_vti_file > /dev/null <<'EOT'
#!/bin/bash

#
# /etc/strongswan.d/ipsec-vti.sh
#

IP=$(which ip)
IPTABLES=$(which iptables)
PLUTO_MARK_OUT_ARR=(${PLUTO_MARK_OUT//// })
PLUTO_MARK_IN_ARR=(${PLUTO_MARK_IN//// })
case "$PLUTO_CONNECTION" in
  Azure1)
    VTI_INTERFACE=vti0
    VTI_LOCALADDR=$onprem2_gw_vti_address1/32
    VTI_REMOTEADDR=$hub2_gw_bgp_ip1/32
    ;;
  Azure2)
    VTI_INTERFACE=vti1
    VTI_LOCALADDR=$onprem2_gw_vti_address2/32
    VTI_REMOTEADDR=$hub2_gw_bgp_ip2/32
    ;;
esac
case "${PLUTO_VERB}" in
    up-client)
        $IP link add ${VTI_INTERFACE} type vti local ${PLUTO_ME} remote ${PLUTO_PEER} okey ${PLUTO_MARK_OUT_ARR[0]} ikey ${PLUTO_MARK_IN_ARR[0]}
        sysctl -w net.ipv4.conf.${VTI_INTERFACE}.disable_policy=1
        sysctl -w net.ipv4.conf.${VTI_INTERFACE}.rp_filter=2 || sysctl -w net.ipv4.conf.${VTI_INTERFACE}.rp_filter=0
        $IP addr add ${VTI_LOCALADDR} remote ${VTI_REMOTEADDR} dev ${VTI_INTERFACE}
        $IP link set ${VTI_INTERFACE} up mtu 1350
        $IPTABLES -t mangle -I FORWARD -o ${VTI_INTERFACE} -p tcp -m tcp --tcp-flags SYN,RST SYN -j TCPMSS --clamp-mss-to-pmtu
        $IPTABLES -t mangle -I INPUT -p esp -s ${PLUTO_PEER} -d ${PLUTO_ME} -j MARK --set-xmark ${PLUTO_MARK_IN}
        $IP route flush table 220
        ;;
    down-client)
        $IP link del ${VTI_INTERFACE}
        $IPTABLES -t mangle -D FORWARD -o ${VTI_INTERFACE} -p tcp -m tcp --tcp-flags SYN,RST SYN -j TCPMSS --clamp-mss-to-pmtu
        $IPTABLES -t mangle -D INPUT -p esp -s ${PLUTO_PEER} -d ${PLUTO_ME} -j MARK --set-xmark ${PLUTO_MARK_IN}
        ;;
esac

# Enable IPv4 forwarding
sysctl -w net.ipv4.ip_forward=1
sysctl -w net.ipv4.conf.eth0.disable_xfrm=1
sysctl -w net.ipv4.conf.eth0.disable_policy=1
EOT

sed -i "/\$onprem2_gw_vti_address1/ s//$onprem2_gw_vti_address1/" $ipsec_vti_file
sed -i "/\$onprem2_gw_vti_address2/ s//$onprem2_gw_vti_address2/" $ipsec_vti_file
sed -i "/\$hub2_gw_bgp_ip1/ s//$hub2_gw_bgp_ip1/" $ipsec_vti_file
sed -i "/\$hub2_gw_bgp_ip2/ s//$hub2_gw_bgp_ip2/" $ipsec_vti_file


# frr.conf
frr_conf_file=~/frr.conf
cat <<EOF > $frr_conf_file
frr version 8.1
frr defaults traditional
hostname $onprem2_gw_vm_name
log syslog informational
no ipv6 forwarding
service integrated-vtysh-config
!
ip route $default_address1 $onprem2_gw_ext_gw_ip
ip route $default_address2 $onprem2_gw_ext_gw_ip
ip route $onprem2_vnet_address $onprem2_gw_ext_gw_ip
ip route $hub2_gw_bgp_ip1/32 $onprem2_gw_ext_gw_ip
ip route $hub2_gw_bgp_ip2/32 $onprem2_gw_ext_gw_ip
!
router bgp $onprem2_gw_asn
 bgp router-id $onprem2_gw_ext_private_ip
 no bgp ebgp-requires-policy
 neighbor $hub2_gw_bgp_ip1 remote-as $hub2_gw_asn
 neighbor $hub2_gw_bgp_ip1 description $hub2_gw_name-0
 neighbor $hub2_gw_bgp_ip1 ebgp-multihop 2
 neighbor $hub2_gw_bgp_ip2 remote-as $hub2_gw_asn
 neighbor $hub2_gw_bgp_ip2 description $hub2_gw_name-1
 neighbor $hub2_gw_bgp_ip2 ebgp-multihop 2
 !
 address-family ipv4 unicast
  network $onprem2_vnet_address
  neighbor $hub2_gw_bgp_ip1 soft-reconfiguration inbound
  neighbor $hub2_gw_bgp_ip2 soft-reconfiguration inbound
 exit-address-family
exit
!
EOF

##### copy files to onprem gw
echo -e "\e[1;36mCopying and applying S2S/BGP VPN Config files to $onprem2_gw_vm_name Gateway VM...\e[0m"
# admin_username=$(whoami)
scp -o StrictHostKeyChecking=no $psk_file $ipsec_file $ipsec_vti_file $frr_conf_file $onprem2_gw_pubip:/home/$admin_username
scp -o StrictHostKeyChecking=no .ssh/* $onprem2_gw_pubip:/home/$admin_username/.ssh/
ssh -n -o BatchMode=yes -o StrictHostKeyChecking=no $onprem2_gw_pubip "sudo iptables -t nat -A POSTROUTING -o eth0 -j MASQUERADE"
ssh -n -o BatchMode=yes -o StrictHostKeyChecking=no $onprem2_gw_pubip "sudo mv /home/$admin_username/frr.conf /etc/frr/frr.conf && sudo mv /home/$admin_username/ipsec.* /etc/ && sudo mv /home/$admin_username/ipsec-vti.sh /etc/strongswan.d/ && chmod +x /etc/strongswan.d/ipsec-vti.sh &&  sudo service frr restart && sudo systemctl restart ipsec"
echo -e "\e[1;36mChecking the status of S2S VPN between $onprem2_gw_vm_name and $hub1_gw_name VPN Gateways...\e[0m"
ssh -n -o BatchMode=yes -o StrictHostKeyChecking=no $onprem2_gw_pubip "sudo ipsec status"
#iptables -t nat -L
# clean up config files
rm $psk_file $ipsec_file $ipsec_vti_file $frr_conf_file






#############
# Diagnosis #
#############

# checking the bgp details on the NVA VM
echo -e "\e[1;36mChecking the BGP details on $hub1_nva_name VM...\e[0m"
ssh -n -o BatchMode=yes -o StrictHostKeyChecking=no $hub1_nva_pubip "sudo vtysh -c 'show ip bgp'"
echo -e "\e[1;36mChecking the received routes on $hub1_nva_name VM...\e[0m"
ssh -n -o BatchMode=yes -o StrictHostKeyChecking=no $hub1_nva_pubip "sudo vtysh -c 'show ip bgp neighbors $hub1_rs_ip1 received-routes'"
ssh -n -o BatchMode=yes -o StrictHostKeyChecking=no $hub1_nva_pubip "sudo vtysh -c 'show ip bgp neighbors $hub1_rs_ip2 received-routes'"
echo -e "\e[1;36mChecking the advertised routes to $hub1_nva_name VM...\e[0m"
ssh -n -o BatchMode=yes -o StrictHostKeyChecking=no $hub1_nva_pubip "sudo vtysh -c 'show ip bgp neighbors $hub1_rs_ip1 advertised-routes'"
ssh -n -o BatchMode=yes -o StrictHostKeyChecking=no $hub1_nva_pubip "sudo vtysh -c 'show ip bgp neighbors $hub1_rs_ip2 advertised-routes'"
# checking the bgp details on the onprem1 gw
echo -e "\e[1;36mChecking the BGP details on $onprem1_gw_vm_name...\e[0m"
ssh -n -o BatchMode=yes -o StrictHostKeyChecking=no $onprem1_gw_pubip "sudo vtysh -c 'show ip bgp'"
echo -e "\e[1;36mChecking the received routes on $onprem1_gw_vm_name...\e[0m"
ssh -n -o BatchMode=yes -o StrictHostKeyChecking=no $onprem1_gw_pubip "sudo vtysh -c 'show ip bgp neighbors $hub1_gw_bgp_ip1 received-routes'"
ssh -n -o BatchMode=yes -o StrictHostKeyChecking=no $onprem1_gw_pubip "sudo vtysh -c 'show ip bgp neighbors $hub1_gw_bgp_ip2 received-routes'"
echo -e "\e[1;36mChecking the advertised routes to $onprem1_gw_vm_name...\e[0m"
ssh -n -o BatchMode=yes -o StrictHostKeyChecking=no $onprem1_gw_pubip "sudo vtysh -c 'show ip bgp neighbors $hub1_gw_bgp_ip1 advertised-routes'"
ssh -n -o BatchMode=yes -o StrictHostKeyChecking=no $onprem1_gw_pubip "sudo vtysh -c 'show ip bgp neighbors $hub1_gw_bgp_ip2 advertised-routes'"
# checking the bgp details on the onprem2 gw
echo -e "\e[1;36mChecking the BGP details on $onprem2_gw_vm_name...\e[0m"
ssh -n -o BatchMode=yes -o StrictHostKeyChecking=no $onprem2_gw_pubip "sudo vtysh -c 'show ip bgp'"
echo -e "\e[1;36mChecking the received routes on $onprem2_gw_vm_name...\e[0m"
ssh -n -o BatchMode=yes -o StrictHostKeyChecking=no $onprem2_gw_pubip "sudo vtysh -c 'show ip bgp neighbors $hub1_gw_bgp_ip1 received-routes'"
ssh -n -o BatchMode=yes -o StrictHostKeyChecking=no $onprem2_gw_pubip "sudo vtysh -c 'show ip bgp neighbors $hub1_gw_bgp_ip2 received-routes'"
echo -e "\e[1;36mChecking the advertised routes to $onprem2_gw_vm_name...\e[0m"
ssh -n -o BatchMode=yes -o StrictHostKeyChecking=no $onprem2_gw_pubip "sudo vtysh -c 'show ip bgp neighbors $hub1_gw_bgp_ip1 advertised-routes'"
ssh -n -o BatchMode=yes -o StrictHostKeyChecking=no $onprem2_gw_pubip "sudo vtysh -c 'show ip bgp neighbors $hub1_gw_bgp_ip2 advertised-routes'"
# show BGP route tables in RS
# Learned routes by Azure Route Server in hub1
echo -e "\e[1;36mListing learned routes by $hub1_rs_name Azure Route Server...\e[0m"
az network routeserver peering list-learned-routes -n $hub1_nva_name-peering --routeserver $hub1_rs_name -g $rg --query 'RouteServiceRole_IN_0' -o table
az network routeserver peering list-learned-routes -n $hub1_nva_name-peering --routeserver $hub1_rs_name -g $rg --query 'RouteServiceRole_IN_1' -o table
# Advertised routes from Azure Route Server in bub1
echo -e "\e[1;36mListing advertised routes by $hub1_nva_name to $hub1_rs_name Azure Route Server...\e[0m"
az network routeserver peering list-advertised-routes -n $hub1_nva_name-peering --routeserver $hub1_rs_name -g $rg --query 'RouteServiceRole_IN_0' -o table
az network routeserver peering list-advertised-routes -n $hub1_nva_name-peering --routeserver $hub1_rs_name -g $rg --query 'RouteServiceRole_IN_1' -o table

# Learned routes by Azure Route Server in hub2
echo -e "\e[1;36mListing learned routes by $hub1_rs_name Azure Route Server...\e[0m"
az network routeserver peering list-learned-routes -n $hub2_nva_name-peering --routeserver $hub2_rs_name -g $rg --query 'RouteServiceRole_IN_0' -o table
az network routeserver peering list-learned-routes -n $hub2_nva_name-peering --routeserver $hub2_rs_name -g $rg --query 'RouteServiceRole_IN_1' -o table
# Advertised routes from Azure Route Server in bub2
echo -e "\e[1;36mListing advertised routes by $hub1_nva_name to $hub1_rs_name Azure Route Server...\e[0m"
az network routeserver peering list-advertised-routes -n $hub2_nva_name-peering --routeserver $hub2_rs_name -g $rg --query 'RouteServiceRole_IN_0' -o table
az network routeserver peering list-advertised-routes -n $hub2_nva_name-peering --routeserver $hub2_rs_name -g $rg --query 'RouteServiceRole_IN_1' -o table

# vnet gateway learned routes
echo -e "\e[1;36mListing learned routes by $hub1_gw_name VPN Gateway...\e[0m"
az network vnet-gateway list-learned-routes -g $rg -n $hub1_gw_name -o table
echo -e "\e[1;36mListing advertised routes from $hub1_gw_name VPN Gateway to $onprem1_gw_vm_name...\e[0m"
az network vnet-gateway list-advertised-routes -g $rg -n $hub1_gw_name --peer $onprem1_gw_ext_private_ip -o table
echo -e "\e[1;36mListing learned routes by $hub2_gw_name VPN Gateway...\e[0m"
az network vnet-gateway list-learned-routes -g $rg -n $hub2_gw_name -o table
echo -e "\e[1;36mListing advertised routes from $hub1_gw_name VPN Gateway to $onprem2_gw_vm_name...\e[0m"
az network vnet-gateway list-advertised-routes -g $rg -n $hub1_gw_name --peer $onprem2_gw_ext_private_ip -o table

# effective routes on spoke vms
# spoke11 vm
echo -e "\e[1;36mListing effective routes on $spoke11_vm_name NIC ...\e[0m"
az network nic show-effective-route-table -g $rg -n $spoke11_vm_name-nic -o table
# spoke12 vm
echo -e "\e[1;36mListing effective routes on $spoke12_vm_name NIC ...\e[0m"
az network nic show-effective-route-table -g $rg -n $spoke12_vm_name-nic -o table
# hub vm
echo -e "\e[1;36mListing effective routes on $hub1_vm_name NIC ...\e[0m"
az network nic show-effective-route-table -g $rg -n $hub1_vm_name-nic -o table

script_run_time=$(expr `date +%s` - $script_start_time)
((minutes=${script_run_time}/60))
((seconds=${script_run_time}%60))
echo -e "\e[1;34mTotal script runtime is (minutes:seconds): $minutes:$seconds\e[0m"
##########
#Clean up
##########
# az group delete -n $rg -y --no-wait 
